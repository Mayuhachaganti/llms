{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":2415872,"sourceType":"datasetVersion","datasetId":1461623}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Amazon Reviews Modelling Using BERT with Noisy Labels","metadata":{}},{"cell_type":"markdown","source":"# 1. Install and Import Necessary Libray For NLP and Sentiment Analysis","metadata":{}},{"cell_type":"code","source":"%%capture\n!pip install stopwords\n!pip install flair\n!pip install nltk\n!pip install swifter","metadata":{"execution":{"iopub.status.busy":"2024-07-01T10:59:22.463330Z","iopub.execute_input":"2024-07-01T10:59:22.463686Z","iopub.status.idle":"2024-07-01T11:00:40.070752Z","shell.execute_reply.started":"2024-07-01T10:59:22.463598Z","shell.execute_reply":"2024-07-01T11:00:40.069854Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"!pip install --upgrade pyarrow","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:00:40.072712Z","iopub.execute_input":"2024-07-01T11:00:40.072952Z","iopub.status.idle":"2024-07-01T11:00:50.189472Z","shell.execute_reply.started":"2024-07-01T11:00:40.072924Z","shell.execute_reply":"2024-07-01T11:00:50.188740Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Requirement already satisfied: pyarrow in /opt/conda/lib/python3.7/site-packages (12.0.1)\nRequirement already satisfied: numpy>=1.16.6 in /opt/conda/lib/python3.7/site-packages (from pyarrow) (1.20.3)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nimport random as rn\nimport seaborn as sns\nfrom plotly import graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom collections import Counter\nfrom PIL import Image\n\nfrom imblearn.over_sampling import RandomOverSampler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\npd.options.display.max_rows = None\nseed=40","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:00:50.190807Z","iopub.execute_input":"2024-07-01T11:00:50.191019Z","iopub.status.idle":"2024-07-01T11:00:55.202324Z","shell.execute_reply.started":"2024-07-01T11:00:50.190994Z","shell.execute_reply":"2024-07-01T11:00:55.201551Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/geopandas/_compat.py:115: UserWarning: The Shapely GEOS version (3.9.1-CAPI-1.14.2) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.\n  shapely_geos_version, geos_capi_version_string\n","output_type":"stream"}]},{"cell_type":"markdown","source":" ","metadata":{}},{"cell_type":"markdown","source":"# 2. Import Amazon Reviews Dataset","metadata":{}},{"cell_type":"markdown","source":"### taking 10% of our data to analyze and to be trained.","metadata":{}},{"cell_type":"code","source":"rn.seed(a=40)\nreview = pd.read_csv('../input/amazon-product-reviews/Reviews.csv')\nreview.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:00:55.204309Z","iopub.execute_input":"2024-07-01T11:00:55.204568Z","iopub.status.idle":"2024-07-01T11:01:01.839676Z","shell.execute_reply.started":"2024-07-01T11:00:55.204538Z","shell.execute_reply":"2024-07-01T11:01:01.838922Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(568454, 10)"},"metadata":{}}]},{"cell_type":"code","source":"review.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:01.840934Z","iopub.execute_input":"2024-07-01T11:01:01.841710Z","iopub.status.idle":"2024-07-01T11:01:01.861178Z","shell.execute_reply.started":"2024-07-01T11:01:01.841666Z","shell.execute_reply":"2024-07-01T11:01:01.860470Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   Id   ProductId          UserId                      ProfileName  \\\n0   1  B001E4KFG0  A3SGXH7AUHU8GW                       delmartian   \n1   2  B00813GRG4  A1D87F6ZCVE5NK                           dll pa   \n2   3  B000LQOCH0   ABXLMWJIXXAIN  Natalia Corres \"Natalia Corres\"   \n3   4  B000UA0QIQ  A395BORC6FGVXV                             Karl   \n4   5  B006K2ZZ7K  A1UQRSCLF8GW1T    Michael D. Bigham \"M. Wassir\"   \n\n   HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n0                     1                       1      5  1303862400   \n1                     0                       0      1  1346976000   \n2                     1                       1      4  1219017600   \n3                     3                       3      2  1307923200   \n4                     0                       0      5  1350777600   \n\n                 Summary                                               Text  \n0  Good Quality Dog Food  I have bought several of the Vitality canned d...  \n1      Not as Advertised  Product arrived labeled as Jumbo Salted Peanut...  \n2  \"Delight\" says it all  This is a confection that has been around a fe...  \n3         Cough Medicine  If you are looking for the secret ingredient i...  \n4            Great taffy  Great taffy at a great price.  There was a wid...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>ProductId</th>\n      <th>UserId</th>\n      <th>ProfileName</th>\n      <th>HelpfulnessNumerator</th>\n      <th>HelpfulnessDenominator</th>\n      <th>Score</th>\n      <th>Time</th>\n      <th>Summary</th>\n      <th>Text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>B001E4KFG0</td>\n      <td>A3SGXH7AUHU8GW</td>\n      <td>delmartian</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>1303862400</td>\n      <td>Good Quality Dog Food</td>\n      <td>I have bought several of the Vitality canned d...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>B00813GRG4</td>\n      <td>A1D87F6ZCVE5NK</td>\n      <td>dll pa</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1346976000</td>\n      <td>Not as Advertised</td>\n      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>B000LQOCH0</td>\n      <td>ABXLMWJIXXAIN</td>\n      <td>Natalia Corres \"Natalia Corres\"</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1219017600</td>\n      <td>\"Delight\" says it all</td>\n      <td>This is a confection that has been around a fe...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>B000UA0QIQ</td>\n      <td>A395BORC6FGVXV</td>\n      <td>Karl</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1307923200</td>\n      <td>Cough Medicine</td>\n      <td>If you are looking for the secret ingredient i...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>B006K2ZZ7K</td>\n      <td>A1UQRSCLF8GW1T</td>\n      <td>Michael D. Bigham \"M. Wassir\"</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>1350777600</td>\n      <td>Great taffy</td>\n      <td>Great taffy at a great price.  There was a wid...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### group the scores into positive and negative sentiment","metadata":{}},{"cell_type":"code","source":"def score_round(x):\n    if x>=3:\n        return 1\n    else: \n        return 0\nreview['review_score']= review.Score.apply(score_round)\nreview = review.rename(columns={'Text':'review_text'})\ndf=review.copy()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:01.863107Z","iopub.execute_input":"2024-07-01T11:01:01.863324Z","iopub.status.idle":"2024-07-01T11:01:02.359910Z","shell.execute_reply.started":"2024-07-01T11:01:01.863297Z","shell.execute_reply":"2024-07-01T11:01:02.359244Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"df['review_score'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:02.361053Z","iopub.execute_input":"2024-07-01T11:01:02.361590Z","iopub.status.idle":"2024-07-01T11:01:02.375850Z","shell.execute_reply.started":"2024-07-01T11:01:02.361546Z","shell.execute_reply":"2024-07-01T11:01:02.374945Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"1    486417\n0     82037\nName: review_score, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"zeroes=df[review['review_score']==0].head(30000)\nones=df[review['review_score']==1].head(20000)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:02.377137Z","iopub.execute_input":"2024-07-01T11:01:02.377446Z","iopub.status.idle":"2024-07-01T11:01:02.493065Z","shell.execute_reply.started":"2024-07-01T11:01:02.377403Z","shell.execute_reply":"2024-07-01T11:01:02.492259Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"d=pd.concat([zeroes,ones])","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:02.494451Z","iopub.execute_input":"2024-07-01T11:01:02.494784Z","iopub.status.idle":"2024-07-01T11:01:02.529472Z","shell.execute_reply.started":"2024-07-01T11:01:02.494742Z","shell.execute_reply":"2024-07-01T11:01:02.528707Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"d.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:02.532449Z","iopub.execute_input":"2024-07-01T11:01:02.532767Z","iopub.status.idle":"2024-07-01T11:01:02.549466Z","shell.execute_reply.started":"2024-07-01T11:01:02.532731Z","shell.execute_reply":"2024-07-01T11:01:02.548581Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"    Id   ProductId          UserId     ProfileName  HelpfulnessNumerator  \\\n1    2  B00813GRG4  A1D87F6ZCVE5NK          dll pa                     0   \n3    4  B000UA0QIQ  A395BORC6FGVXV            Karl                     3   \n12  13  B0009XLVG0   A327PCT23YH90              LT                     1   \n16  17  B001GVISJM  A3KLWF6WQ5BNYO  Erica Neathery                     0   \n26  27  B001GVISJM  A3RXAU2N8KV45G          lady21                     0   \n\n    HelpfulnessDenominator  Score        Time  \\\n1                        0      1  1346976000   \n3                        3      2  1307923200   \n12                       1      1  1339545600   \n16                       0      2  1348099200   \n26                       1      1  1332633600   \n\n                                 Summary  \\\n1                      Not as Advertised   \n3                         Cough Medicine   \n12  My Cats Are Not Fans of the New Food   \n16                            poor taste   \n26                       Nasty No flavor   \n\n                                          review_text  review_score  \n1   Product arrived labeled as Jumbo Salted Peanut...             0  \n3   If you are looking for the secret ingredient i...             0  \n12  My cats have been happily eating Felidae Plati...             0  \n16  I love eating them and they are good for watch...             0  \n26  The candy is just red , No flavor . Just  plan...             0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>ProductId</th>\n      <th>UserId</th>\n      <th>ProfileName</th>\n      <th>HelpfulnessNumerator</th>\n      <th>HelpfulnessDenominator</th>\n      <th>Score</th>\n      <th>Time</th>\n      <th>Summary</th>\n      <th>review_text</th>\n      <th>review_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>B00813GRG4</td>\n      <td>A1D87F6ZCVE5NK</td>\n      <td>dll pa</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1346976000</td>\n      <td>Not as Advertised</td>\n      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>B000UA0QIQ</td>\n      <td>A395BORC6FGVXV</td>\n      <td>Karl</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1307923200</td>\n      <td>Cough Medicine</td>\n      <td>If you are looking for the secret ingredient i...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>13</td>\n      <td>B0009XLVG0</td>\n      <td>A327PCT23YH90</td>\n      <td>LT</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1339545600</td>\n      <td>My Cats Are Not Fans of the New Food</td>\n      <td>My cats have been happily eating Felidae Plati...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>B001GVISJM</td>\n      <td>A3KLWF6WQ5BNYO</td>\n      <td>Erica Neathery</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1348099200</td>\n      <td>poor taste</td>\n      <td>I love eating them and they are good for watch...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>27</td>\n      <td>B001GVISJM</td>\n      <td>A3RXAU2N8KV45G</td>\n      <td>lady21</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1332633600</td>\n      <td>Nasty No flavor</td>\n      <td>The candy is just red , No flavor . Just  plan...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['review_score'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:02.551192Z","iopub.execute_input":"2024-07-01T11:01:02.551949Z","iopub.status.idle":"2024-07-01T11:01:02.566172Z","shell.execute_reply.started":"2024-07-01T11:01:02.551902Z","shell.execute_reply":"2024-07-01T11:01:02.565333Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"1    486417\n0     82037\nName: review_score, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df=d.copy()\ndf=df.sample(frac=1).reset_index(drop=True)\ndf.head()\nimport pandas as pd\nimport numpy as np\nnum_rows_to_shuffle = int(0.2 * len(df))\nnp.random.seed(0)  \nindices_to_shuffle = np.random.choice(df.index[1:], size=num_rows_to_shuffle, replace=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:02.567348Z","iopub.execute_input":"2024-07-01T11:01:02.567606Z","iopub.status.idle":"2024-07-01T11:01:02.640214Z","shell.execute_reply.started":"2024-07-01T11:01:02.567575Z","shell.execute_reply":"2024-07-01T11:01:02.639278Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"len(indices_to_shuffle)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:02.641451Z","iopub.execute_input":"2024-07-01T11:01:02.641728Z","iopub.status.idle":"2024-07-01T11:01:02.647594Z","shell.execute_reply.started":"2024-07-01T11:01:02.641694Z","shell.execute_reply":"2024-07-01T11:01:02.646715Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"10000"},"metadata":{}}]},{"cell_type":"code","source":"d=df.copy()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:02.648794Z","iopub.execute_input":"2024-07-01T11:01:02.649024Z","iopub.status.idle":"2024-07-01T11:01:02.662486Z","shell.execute_reply.started":"2024-07-01T11:01:02.648996Z","shell.execute_reply":"2024-07-01T11:01:02.661702Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"d['review_score'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:02.663862Z","iopub.execute_input":"2024-07-01T11:01:02.664264Z","iopub.status.idle":"2024-07-01T11:01:02.673131Z","shell.execute_reply.started":"2024-07-01T11:01:02.664220Z","shell.execute_reply":"2024-07-01T11:01:02.672336Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"0    30000\n1    20000\nName: review_score, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"for idx in indices_to_shuffle:\n    if df['review_score'].loc[idx]==1:\n        df.at[idx,'review_score']=0\n    elif df['review_score'].loc[idx]==0:\n        df.at[idx,'review_score']=1\n    else:\n        print('no invalid value')","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:02.674444Z","iopub.execute_input":"2024-07-01T11:01:02.674923Z","iopub.status.idle":"2024-07-01T11:01:03.195242Z","shell.execute_reply.started":"2024-07-01T11:01:02.674881Z","shell.execute_reply":"2024-07-01T11:01:03.194490Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"df['review_score'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:03.196396Z","iopub.execute_input":"2024-07-01T11:01:03.196656Z","iopub.status.idle":"2024-07-01T11:01:03.205676Z","shell.execute_reply.started":"2024-07-01T11:01:03.196624Z","shell.execute_reply":"2024-07-01T11:01:03.204823Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"0    27822\n1    22178\nName: review_score, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"review=df.copy()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:03.206892Z","iopub.execute_input":"2024-07-01T11:01:03.207125Z","iopub.status.idle":"2024-07-01T11:01:03.243973Z","shell.execute_reply.started":"2024-07-01T11:01:03.207095Z","shell.execute_reply":"2024-07-01T11:01:03.243252Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"# review.review_score.replace(\"positive\" , 1 , inplace = True)\n# review.review_score.replace(\"negative\" , 0 , inplace = True)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:03.245026Z","iopub.execute_input":"2024-07-01T11:01:03.245236Z","iopub.status.idle":"2024-07-01T11:01:03.249001Z","shell.execute_reply.started":"2024-07-01T11:01:03.245209Z","shell.execute_reply":"2024-07-01T11:01:03.248116Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":"### making sure that our text review data type is string","metadata":{}},{"cell_type":"code","source":"review.review_text = review.review_text.astype('str')\nreview.Summary = review.Summary.astype('str')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:03.250086Z","iopub.execute_input":"2024-07-01T11:01:03.250312Z","iopub.status.idle":"2024-07-01T11:01:03.277042Z","shell.execute_reply.started":"2024-07-01T11:01:03.250269Z","shell.execute_reply":"2024-07-01T11:01:03.276241Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"# 3. Analysis and Visualization","metadata":{}},{"cell_type":"markdown","source":"### Distribution of Reviews in Each Sentiment","metadata":{}},{"cell_type":"code","source":"temp = review.groupby('review_score').count()['review_text'].reset_index().sort_values(by='review_text',ascending=False)\ntemp.style.background_gradient(cmap='Purples')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:03.278440Z","iopub.execute_input":"2024-07-01T11:01:03.278735Z","iopub.status.idle":"2024-07-01T11:01:03.418539Z","shell.execute_reply.started":"2024-07-01T11:01:03.278702Z","shell.execute_reply":"2024-07-01T11:01:03.417729Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7e7c189f9710>","text/html":"<style type=\"text/css\">\n#T_e6cc3_row0_col0, #T_e6cc3_row1_col1 {\n  background-color: #fcfbfd;\n  color: #000000;\n}\n#T_e6cc3_row0_col1, #T_e6cc3_row1_col0 {\n  background-color: #3f007d;\n  color: #f1f1f1;\n}\n</style>\n<table id=\"T_e6cc3_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >review_score</th>\n      <th class=\"col_heading level0 col1\" >review_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_e6cc3_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_e6cc3_row0_col0\" class=\"data row0 col0\" >0</td>\n      <td id=\"T_e6cc3_row0_col1\" class=\"data row0 col1\" >27822</td>\n    </tr>\n    <tr>\n      <th id=\"T_e6cc3_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_e6cc3_row1_col0\" class=\"data row1 col0\" >1</td>\n      <td id=\"T_e6cc3_row1_col1\" class=\"data row1 col1\" >22178</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}]},{"cell_type":"code","source":"sns.set_theme(style='whitegrid')\nsns.set(rc = {'figure.figsize':(13,8)})\nsns.set_palette(\"pastel\")\nsns.countplot(x='review_score',data=review)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:03.419943Z","iopub.execute_input":"2024-07-01T11:01:03.420682Z","iopub.status.idle":"2024-07-01T11:01:03.686600Z","shell.execute_reply.started":"2024-07-01T11:01:03.420633Z","shell.execute_reply":"2024-07-01T11:01:03.685883Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='review_score', ylabel='count'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 936x576 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"positive = review[review['review_score']==1]\nnegative = review[review['review_score']==0]","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:03.695392Z","iopub.execute_input":"2024-07-01T11:01:03.695644Z","iopub.status.idle":"2024-07-01T11:01:03.716599Z","shell.execute_reply.started":"2024-07-01T11:01:03.695616Z","shell.execute_reply":"2024-07-01T11:01:03.715981Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":" ","metadata":{}},{"cell_type":"markdown","source":"# 4. Data Cleaning For Sentiment Processing","metadata":{}},{"cell_type":"code","source":"from nltk.corpus import stopwords\nfrom nltk import WordNetLemmatizer\nnltk.download('stopwords')\nfrom nltk.stem import PorterStemmer","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:03.953606Z","iopub.execute_input":"2024-07-01T11:01:03.953808Z","iopub.status.idle":"2024-07-01T11:01:04.063230Z","shell.execute_reply.started":"2024-07-01T11:01:03.953782Z","shell.execute_reply":"2024-07-01T11:01:04.062139Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Unzipping corpora/stopwords.zip.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Null values Cleaning","metadata":{}},{"cell_type":"code","source":"review.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.064784Z","iopub.execute_input":"2024-07-01T11:01:04.065090Z","iopub.status.idle":"2024-07-01T11:01:04.117278Z","shell.execute_reply.started":"2024-07-01T11:01:04.065042Z","shell.execute_reply":"2024-07-01T11:01:04.116537Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"Id                        0\nProductId                 0\nUserId                    0\nProfileName               2\nHelpfulnessNumerator      0\nHelpfulnessDenominator    0\nScore                     0\nTime                      0\nSummary                   0\nreview_text               0\nreview_score              0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"### Duplicate Values Removing","metadata":{}},{"cell_type":"code","source":"review = review.drop_duplicates(keep='first')","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.118750Z","iopub.execute_input":"2024-07-01T11:01:04.119007Z","iopub.status.idle":"2024-07-01T11:01:04.284044Z","shell.execute_reply.started":"2024-07-01T11:01:04.118972Z","shell.execute_reply":"2024-07-01T11:01:04.282920Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"review.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.285659Z","iopub.execute_input":"2024-07-01T11:01:04.285965Z","iopub.status.idle":"2024-07-01T11:01:04.293219Z","shell.execute_reply.started":"2024-07-01T11:01:04.285931Z","shell.execute_reply":"2024-07-01T11:01:04.292166Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"(50000, 11)"},"metadata":{}}]},{"cell_type":"markdown","source":"### a function to clean some basic characters","metadata":{}},{"cell_type":"code","source":"def clean(raw):\n    \"\"\" Remove hyperlinks and markup \"\"\"\n    result = re.sub(\"<[a][^>]*>(.+?)</[a]>\", 'Link.', raw)\n    result = re.sub('&gt;', \"\", result)\n    result = re.sub('&#x27;', \"'\", result)\n    result = re.sub('&quot;', '\"', result)\n    result = re.sub('&#x2F;', ' ', result)\n    result = re.sub('<p>', ' ', result)\n    result = re.sub('</i>', '', result)\n    result = re.sub('&#62;', '', result)\n    result = re.sub('<i>', ' ', result)\n    result = re.sub(\"\\n\", '', result)\n    return result","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.294483Z","iopub.execute_input":"2024-07-01T11:01:04.294798Z","iopub.status.idle":"2024-07-01T11:01:04.304577Z","shell.execute_reply.started":"2024-07-01T11:01:04.294758Z","shell.execute_reply":"2024-07-01T11:01:04.303797Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":"### function to remove numeric","metadata":{}},{"cell_type":"code","source":"def remove_num(texts):\n   output = re.sub(r'\\d+', '', texts)\n   return output","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.305780Z","iopub.execute_input":"2024-07-01T11:01:04.306005Z","iopub.status.idle":"2024-07-01T11:01:04.321852Z","shell.execute_reply.started":"2024-07-01T11:01:04.305979Z","shell.execute_reply":"2024-07-01T11:01:04.319667Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":"### function to remove emoji","metadata":{}},{"cell_type":"code","source":"def deEmojify(x):\n    regrex_pattern = re.compile(pattern = \"[\"\n        u\"\\U0001F600-\\U0001F64F\"  # emoticons\n        u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n        u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n        u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           \"]+\", flags = re.UNICODE)\n    return regrex_pattern.sub(r'', x)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.323286Z","iopub.execute_input":"2024-07-01T11:01:04.323627Z","iopub.status.idle":"2024-07-01T11:01:04.333150Z","shell.execute_reply.started":"2024-07-01T11:01:04.323567Z","shell.execute_reply":"2024-07-01T11:01:04.332156Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"markdown","source":"### function to unify whitespaces","metadata":{}},{"cell_type":"code","source":"def unify_whitespaces(x):\n    cleaned_string = re.sub(' +', ' ', x)\n    return cleaned_string ","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.334733Z","iopub.execute_input":"2024-07-01T11:01:04.335099Z","iopub.status.idle":"2024-07-01T11:01:04.342620Z","shell.execute_reply.started":"2024-07-01T11:01:04.335059Z","shell.execute_reply":"2024-07-01T11:01:04.341963Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"markdown","source":"### function to remove symbols","metadata":{}},{"cell_type":"code","source":"def remove_symbols(x):\n    cleaned_string = re.sub(r\"[^a-zA-Z0-9?!.,]+\", ' ', x)\n    return cleaned_string","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.343740Z","iopub.execute_input":"2024-07-01T11:01:04.343986Z","iopub.status.idle":"2024-07-01T11:01:04.352738Z","shell.execute_reply.started":"2024-07-01T11:01:04.343953Z","shell.execute_reply":"2024-07-01T11:01:04.352075Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":"### function to remove punctuation","metadata":{}},{"cell_type":"code","source":"def remove_punctuation(text):\n    final = \"\".join(u for u in text if u not in (\"?\", \".\", \";\", \":\",  \"!\",'\"',','))\n    return final","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.353686Z","iopub.execute_input":"2024-07-01T11:01:04.353924Z","iopub.status.idle":"2024-07-01T11:01:04.362922Z","shell.execute_reply.started":"2024-07-01T11:01:04.353897Z","shell.execute_reply":"2024-07-01T11:01:04.362258Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"markdown","source":"### function to remove stopwords","metadata":{}},{"cell_type":"code","source":"stop=set(stopwords.words(\"english\"))\nstemmer=PorterStemmer()\nlemma=WordNetLemmatizer()\n\ndef remove_stopword(text):\n   text=[word.lower() for word in text.split() if word.lower() not in stop]\n   return \" \".join(text)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.363898Z","iopub.execute_input":"2024-07-01T11:01:04.364094Z","iopub.status.idle":"2024-07-01T11:01:04.374829Z","shell.execute_reply.started":"2024-07-01T11:01:04.364069Z","shell.execute_reply":"2024-07-01T11:01:04.374158Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"markdown","source":"### function to use stemming to normalize words","metadata":{}},{"cell_type":"code","source":"from nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer\ndef Stemming(text):\n   stem=[]\n   stopword = stopwords.words('english')\n   snowball_stemmer = SnowballStemmer('english')\n   word_tokens = nltk.word_tokenize(text)\n   stemmed_word = [snowball_stemmer.stem(word) for word in word_tokens]\n   stem=' '.join(stemmed_word)\n   return stem","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.375842Z","iopub.execute_input":"2024-07-01T11:01:04.376056Z","iopub.status.idle":"2024-07-01T11:01:04.385050Z","shell.execute_reply.started":"2024-07-01T11:01:04.376030Z","shell.execute_reply":"2024-07-01T11:01:04.384244Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":"### combine all the cleaning functions","metadata":{}},{"cell_type":"code","source":"def cleaning(df,review):\n    df[review] = df[review].apply(clean)\n    df[review] = df[review].apply(deEmojify)\n    df[review] = df[review].str.lower()\n    df[review] = df[review].apply(remove_num)\n    df[review] = df[review].apply(remove_symbols)\n    df[review] = df[review].apply(remove_punctuation)\n    df[review] = df[review].apply(remove_stopword)\n    df[review] = df[review].apply(unify_whitespaces)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.386053Z","iopub.execute_input":"2024-07-01T11:01:04.386272Z","iopub.status.idle":"2024-07-01T11:01:04.395386Z","shell.execute_reply.started":"2024-07-01T11:01:04.386246Z","shell.execute_reply":"2024-07-01T11:01:04.394672Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"cleaning(review,'review_text')","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:04.396490Z","iopub.execute_input":"2024-07-01T11:01:04.396727Z","iopub.status.idle":"2024-07-01T11:01:17.880840Z","shell.execute_reply.started":"2024-07-01T11:01:04.396700Z","shell.execute_reply":"2024-07-01T11:01:17.880179Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"review.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:17.882155Z","iopub.execute_input":"2024-07-01T11:01:17.882411Z","iopub.status.idle":"2024-07-01T11:01:17.926424Z","shell.execute_reply.started":"2024-07-01T11:01:17.882382Z","shell.execute_reply":"2024-07-01T11:01:17.925661Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"Id                        0\nProductId                 0\nUserId                    0\nProfileName               2\nHelpfulnessNumerator      0\nHelpfulnessDenominator    0\nScore                     0\nTime                      0\nSummary                   0\nreview_text               0\nreview_score              0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"review[['review_text']].head(20)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:17.927565Z","iopub.execute_input":"2024-07-01T11:01:17.927793Z","iopub.status.idle":"2024-07-01T11:01:17.942340Z","shell.execute_reply.started":"2024-07-01T11:01:17.927766Z","shell.execute_reply":"2024-07-01T11:01:17.941558Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"                                          review_text\n0   buying six packi know product usually crispy t...\n1   best candy cane cocoa real bits candy cane wor...\n2   new formulation absolutely inedible hard rocks...\n3   smoothest best tasting keurig coffee tried bit...\n4   bought decided wanted eat even snack healthier...\n5   bpa lids company claims touch food okey even w...\n6   first wish gotten two samples product could tr...\n7   okay tried several company products fair howev...\n8   ingredients contained food optimal food source...\n9   buy noticed headline says ounce wanted people ...\n10  bit pricy well worth avoid garbage found gums ...\n11  bought oatmeal target trying save money starbu...\n12  chips ahoy chewy gooey megafudge cookies compa...\n13  old biscuits great gave dog years nutro change...\n14  chips crispy hoped package box indicate crispy...\n15  like convenience canned chicken hand great sou...\n16  terrific tasting coffee daughter tasted many d...\n17  honestly say buy variety looks bad smells bad ...\n18  lousy packaging storage food wonderful cat lov...\n19  never tasted jet fuel mac n cheese imagine wou...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>review_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>buying six packi know product usually crispy t...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>best candy cane cocoa real bits candy cane wor...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>new formulation absolutely inedible hard rocks...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>smoothest best tasting keurig coffee tried bit...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bought decided wanted eat even snack healthier...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>bpa lids company claims touch food okey even w...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>first wish gotten two samples product could tr...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>okay tried several company products fair howev...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>ingredients contained food optimal food source...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>buy noticed headline says ounce wanted people ...</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>bit pricy well worth avoid garbage found gums ...</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>bought oatmeal target trying save money starbu...</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>chips ahoy chewy gooey megafudge cookies compa...</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>old biscuits great gave dog years nutro change...</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>chips crispy hoped package box indicate crispy...</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>like convenience canned chicken hand great sou...</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>terrific tasting coffee daughter tasted many d...</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>honestly say buy variety looks bad smells bad ...</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>lousy packaging storage food wonderful cat lov...</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>never tasted jet fuel mac n cheese imagine wou...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"review_vis2 = review.copy()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:17.943431Z","iopub.execute_input":"2024-07-01T11:01:17.943685Z","iopub.status.idle":"2024-07-01T11:01:17.957903Z","shell.execute_reply.started":"2024-07-01T11:01:17.943657Z","shell.execute_reply":"2024-07-01T11:01:17.957160Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"review_vis2['temp_list'] = review_vis2['review_text'].apply(lambda x:str(x).split())\ntop = Counter([item for sublist in review_vis2['temp_list'] for item in sublist])\ntemp = pd.DataFrame(top.most_common(20))\ntemp.columns = ['Common_words','count']\ntemp.style.background_gradient(cmap='Blues')","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:17.959213Z","iopub.execute_input":"2024-07-01T11:01:17.959446Z","iopub.status.idle":"2024-07-01T11:01:18.714113Z","shell.execute_reply.started":"2024-07-01T11:01:17.959418Z","shell.execute_reply":"2024-07-01T11:01:18.713354Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7e7bfc187dd0>","text/html":"<style type=\"text/css\">\n#T_0bf2a_row0_col1 {\n  background-color: #08306b;\n  color: #f1f1f1;\n}\n#T_0bf2a_row1_col1 {\n  background-color: #aed1e7;\n  color: #000000;\n}\n#T_0bf2a_row2_col1 {\n  background-color: #d4e4f4;\n  color: #000000;\n}\n#T_0bf2a_row3_col1 {\n  background-color: #d6e6f4;\n  color: #000000;\n}\n#T_0bf2a_row4_col1 {\n  background-color: #d7e6f5;\n  color: #000000;\n}\n#T_0bf2a_row5_col1 {\n  background-color: #d8e7f5;\n  color: #000000;\n}\n#T_0bf2a_row6_col1 {\n  background-color: #dbe9f6;\n  color: #000000;\n}\n#T_0bf2a_row7_col1 {\n  background-color: #dfebf7;\n  color: #000000;\n}\n#T_0bf2a_row8_col1 {\n  background-color: #e5eff9;\n  color: #000000;\n}\n#T_0bf2a_row9_col1 {\n  background-color: #e7f0fa;\n  color: #000000;\n}\n#T_0bf2a_row10_col1 {\n  background-color: #eff6fc;\n  color: #000000;\n}\n#T_0bf2a_row11_col1 {\n  background-color: #f0f6fd;\n  color: #000000;\n}\n#T_0bf2a_row12_col1 {\n  background-color: #f1f7fd;\n  color: #000000;\n}\n#T_0bf2a_row13_col1 {\n  background-color: #f3f8fe;\n  color: #000000;\n}\n#T_0bf2a_row14_col1, #T_0bf2a_row15_col1 {\n  background-color: #f5f9fe;\n  color: #000000;\n}\n#T_0bf2a_row16_col1, #T_0bf2a_row17_col1 {\n  background-color: #f6faff;\n  color: #000000;\n}\n#T_0bf2a_row18_col1, #T_0bf2a_row19_col1 {\n  background-color: #f7fbff;\n  color: #000000;\n}\n</style>\n<table id=\"T_0bf2a_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >Common_words</th>\n      <th class=\"col_heading level0 col1\" >count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_0bf2a_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_0bf2a_row0_col0\" class=\"data row0 col0\" >br</td>\n      <td id=\"T_0bf2a_row0_col1\" class=\"data row0 col1\" >61752</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_0bf2a_row1_col0\" class=\"data row1 col0\" >like</td>\n      <td id=\"T_0bf2a_row1_col1\" class=\"data row1 col1\" >25282</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_0bf2a_row2_col0\" class=\"data row2 col0\" >taste</td>\n      <td id=\"T_0bf2a_row2_col1\" class=\"data row2 col1\" >17426</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_0bf2a_row3_col0\" class=\"data row3 col0\" >product</td>\n      <td id=\"T_0bf2a_row3_col1\" class=\"data row3 col1\" >16776</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_0bf2a_row4_col0\" class=\"data row4 col0\" >one</td>\n      <td id=\"T_0bf2a_row4_col1\" class=\"data row4 col1\" >16409</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n      <td id=\"T_0bf2a_row5_col0\" class=\"data row5 col0\" >coffee</td>\n      <td id=\"T_0bf2a_row5_col1\" class=\"data row5 col1\" >16282</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n      <td id=\"T_0bf2a_row6_col0\" class=\"data row6 col0\" >good</td>\n      <td id=\"T_0bf2a_row6_col1\" class=\"data row6 col1\" >15444</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n      <td id=\"T_0bf2a_row7_col0\" class=\"data row7 col0\" >would</td>\n      <td id=\"T_0bf2a_row7_col1\" class=\"data row7 col1\" >14303</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n      <td id=\"T_0bf2a_row8_col0\" class=\"data row8 col0\" >food</td>\n      <td id=\"T_0bf2a_row8_col1\" class=\"data row8 col1\" >12691</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n      <td id=\"T_0bf2a_row9_col0\" class=\"data row9 col0\" >flavor</td>\n      <td id=\"T_0bf2a_row9_col1\" class=\"data row9 col1\" >12359</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n      <td id=\"T_0bf2a_row10_col0\" class=\"data row10 col0\" >tea</td>\n      <td id=\"T_0bf2a_row10_col1\" class=\"data row10 col1\" >9850</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n      <td id=\"T_0bf2a_row11_col0\" class=\"data row11 col0\" >get</td>\n      <td id=\"T_0bf2a_row11_col1\" class=\"data row11 col1\" >9821</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n      <td id=\"T_0bf2a_row12_col0\" class=\"data row12 col0\" >great</td>\n      <td id=\"T_0bf2a_row12_col1\" class=\"data row12 col1\" >9613</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n      <td id=\"T_0bf2a_row13_col0\" class=\"data row13 col0\" >really</td>\n      <td id=\"T_0bf2a_row13_col1\" class=\"data row13 col1\" >8985</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n      <td id=\"T_0bf2a_row14_col0\" class=\"data row14 col0\" >much</td>\n      <td id=\"T_0bf2a_row14_col1\" class=\"data row14 col1\" >8549</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n      <td id=\"T_0bf2a_row15_col0\" class=\"data row15 col0\" >even</td>\n      <td id=\"T_0bf2a_row15_col1\" class=\"data row15 col1\" >8418</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n      <td id=\"T_0bf2a_row16_col0\" class=\"data row16 col0\" >buy</td>\n      <td id=\"T_0bf2a_row16_col1\" class=\"data row16 col1\" >8099</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n      <td id=\"T_0bf2a_row17_col0\" class=\"data row17 col0\" >love</td>\n      <td id=\"T_0bf2a_row17_col1\" class=\"data row17 col1\" >7968</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n      <td id=\"T_0bf2a_row18_col0\" class=\"data row18 col0\" >dog</td>\n      <td id=\"T_0bf2a_row18_col1\" class=\"data row18 col1\" >7779</td>\n    </tr>\n    <tr>\n      <th id=\"T_0bf2a_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n      <td id=\"T_0bf2a_row19_col0\" class=\"data row19 col0\" >amazon</td>\n      <td id=\"T_0bf2a_row19_col1\" class=\"data row19 col1\" >7726</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}]},{"cell_type":"code","source":"sns.set_theme(style=\"whitegrid\")\nsns.barplot(x=\"count\", y=\"Common_words\", data=temp)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:18.715169Z","iopub.execute_input":"2024-07-01T11:01:18.715423Z","iopub.status.idle":"2024-07-01T11:01:19.091560Z","shell.execute_reply.started":"2024-07-01T11:01:18.715395Z","shell.execute_reply":"2024-07-01T11:01:19.090701Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='count', ylabel='Common_words'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 936x576 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":" ","metadata":{}},{"cell_type":"markdown","source":"# 5. BERT Tokenizing and Modelling","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tokenizers import BertWordPieceTokenizer\n\nimport transformers\nfrom transformers import BertTokenizer, TFBertForSequenceClassification\nfrom transformers import InputExample, InputFeatures\n\nimport logging\ntransformers.logging.set_verbosity_error()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:19.093022Z","iopub.execute_input":"2024-07-01T11:01:19.093286Z","iopub.status.idle":"2024-07-01T11:01:27.157945Z","shell.execute_reply.started":"2024-07-01T11:01:19.093258Z","shell.execute_reply":"2024-07-01T11:01:27.157265Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"markdown","source":"### Split Our Data to Training, Validation, and Hold-Out Data","metadata":{}},{"cell_type":"code","source":"reviews = review[\"review_text\"].values.tolist()\nlabels = review[\"review_score\"].tolist()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:27.159009Z","iopub.execute_input":"2024-07-01T11:01:27.159240Z","iopub.status.idle":"2024-07-01T11:01:27.167364Z","shell.execute_reply.started":"2024-07-01T11:01:27.159202Z","shell.execute_reply":"2024-07-01T11:01:27.166449Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"# split the dataset into train, validation and holdout sets (60-20-20)\ntraining_sentences, test_sentences, training_labels, test_labels = train_test_split(reviews, labels, test_size=.4)\n\nvalidation_sentences, holdout_sentences, validation_labels, holdout_labels = train_test_split(test_sentences, test_labels, test_size=.5)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:27.168354Z","iopub.execute_input":"2024-07-01T11:01:27.168580Z","iopub.status.idle":"2024-07-01T11:01:27.226325Z","shell.execute_reply.started":"2024-07-01T11:01:27.168553Z","shell.execute_reply":"2024-07-01T11:01:27.225762Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"markdown","source":"### Tokenize Our Input Data","metadata":{}},{"cell_type":"code","source":"tokenizer = BertTokenizer.from_pretrained('bert-base-cased')","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:27.227245Z","iopub.execute_input":"2024-07-01T11:01:27.227447Z","iopub.status.idle":"2024-07-01T11:01:28.254351Z","shell.execute_reply.started":"2024-07-01T11:01:27.227421Z","shell.execute_reply":"2024-07-01T11:01:28.253551Z"},"trusted":true},"execution_count":56,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading vocab.txt:   0%|          | 0.00/213k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6a877e62c1fc4d21939b17412151d189"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading tokenizer_config.json:   0%|          | 0.00/49.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"300e6077df2646048af1cbbdeef18bd1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0af8a44a023240e48fc01d81795f175f"}},"metadata":{}}]},{"cell_type":"code","source":"# Example of the tokenizer output\ntokenizer([training_sentences[0]], truncation=True,\n                            padding=True, max_length=512)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:28.255371Z","iopub.execute_input":"2024-07-01T11:01:28.255603Z","iopub.status.idle":"2024-07-01T11:01:28.263077Z","shell.execute_reply.started":"2024-07-01T11:01:28.255575Z","shell.execute_reply":"2024-07-01T11:01:28.262352Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"{'input_ids': [[101, 4333, 4547, 12202, 1297, 1242, 2277, 1256, 2280, 18689, 21534, 5679, 3538, 1243, 1215, 1474, 1177, 1183, 6831, 9304, 9304, 1660, 2940, 1662, 5495, 1896, 2030, 13558, 2621, 5477, 7021, 1256, 2416, 1155, 26949, 3943, 1253, 2992, 1207, 1204, 176, 1158, 10886, 102]], 'token_type_ids': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'attention_mask': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}"},"metadata":{}}]},{"cell_type":"code","source":"# tokenize training, validation and hold-out Texts\n\ntrain_encodings = tokenizer(training_sentences,\n                            truncation=True,\n                            padding=True)\n\nvalidation_encodings = tokenizer(validation_sentences,\n                            truncation=True,\n                            padding=True)\n\nholdout_encodings = tokenizer(holdout_sentences,\n                            truncation=True,\n                            padding=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:01:28.264101Z","iopub.execute_input":"2024-07-01T11:01:28.264309Z","iopub.status.idle":"2024-07-01T11:02:54.355738Z","shell.execute_reply.started":"2024-07-01T11:01:28.264282Z","shell.execute_reply":"2024-07-01T11:02:54.355018Z"},"trusted":true},"execution_count":58,"outputs":[]},{"cell_type":"code","source":"# convert the input encodings and labels into a TensorFlow Dataset object\n\ntrain_dataset = tf.data.Dataset.from_tensor_slices((\n                            dict(train_encodings),\n                            training_labels\n                            ));\n\nvalidation_dataset = tf.data.Dataset.from_tensor_slices((\n                            dict(validation_encodings),\n                            validation_labels\n                            ));\n\nholdout_dataset = tf.data.Dataset.from_tensor_slices((\n                            dict(holdout_encodings),\n                            holdout_labels\n                            ));","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:02:54.356892Z","iopub.execute_input":"2024-07-01T11:02:54.357158Z","iopub.status.idle":"2024-07-01T11:07:44.979851Z","shell.execute_reply.started":"2024-07-01T11:02:54.357127Z","shell.execute_reply":"2024-07-01T11:07:44.978961Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"markdown","source":"### BERT Model Fine-Tuning","metadata":{}},{"cell_type":"code","source":"# initialize our pre-trained BERT model\n\nmodel = TFBertForSequenceClassification.from_pretrained('bert-base-cased',num_labels=2)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:07:44.981050Z","iopub.execute_input":"2024-07-01T11:07:44.981299Z","iopub.status.idle":"2024-07-01T11:07:49.638958Z","shell.execute_reply.started":"2024-07-01T11:07:44.981269Z","shell.execute_reply":"2024-07-01T11:07:49.638308Z"},"trusted":true},"execution_count":60,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading tf_model.h5:   0%|          | 0.00/527M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"dab1c0cf18c94fabaea59163afc23132"}},"metadata":{}}]},{"cell_type":"code","source":"optimizer = tf.keras.optimizers.Adam(learning_rate=2e-5, epsilon=1e-08)\nmodel.compile(optimizer=optimizer, loss=model.compute_loss, metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:07:49.640055Z","iopub.execute_input":"2024-07-01T11:07:49.640283Z","iopub.status.idle":"2024-07-01T11:07:49.656116Z","shell.execute_reply.started":"2024-07-01T11:07:49.640253Z","shell.execute_reply":"2024-07-01T11:07:49.655418Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"# train and fine tune our pre-trained BERT model\n\nhistory = model.fit(train_dataset.shuffle(100).batch(8),\n          epochs=3,\n          batch_size=8,\n          validation_data=validation_dataset.shuffle(100).batch(8), verbose=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T11:07:49.657067Z","iopub.execute_input":"2024-07-01T11:07:49.657268Z","iopub.status.idle":"2024-07-01T13:07:12.918459Z","shell.execute_reply.started":"2024-07-01T11:07:49.657228Z","shell.execute_reply":"2024-07-01T13:07:12.917717Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"Epoch 1/3\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py:376: FutureWarning: The old compute_loss method is deprecated as it conflicts with the Keras compute_loss method added in TF 2.8. If you want the original HF compute_loss, please call hf_compute_loss() instead. From TF versions >= 2.8, or Transformers versions >= 5, calling compute_loss() will get the Keras method instead.\n  return py_builtins.overload_of(f)(*args)\n","output_type":"stream"},{"name":"stdout","text":"3750/3750 [==============================] - 2405s 635ms/step - loss: 0.6126 - accuracy: 0.6819 - val_loss: 0.5859 - val_accuracy: 0.7109\nEpoch 2/3\n3750/3750 [==============================] - 2379s 634ms/step - loss: 0.5579 - accuracy: 0.7407 - val_loss: 0.5928 - val_accuracy: 0.7111\nEpoch 3/3\n3750/3750 [==============================] - 2380s 635ms/step - loss: 0.4923 - accuracy: 0.7913 - val_loss: 0.6139 - val_accuracy: 0.7054\n","output_type":"stream"}]},{"cell_type":"code","source":"from matplotlib.ticker import MaxNLocator\n\n# plot train and validation accuracy\n\nax = plt.figure().gca()\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nax.xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T13:07:12.919746Z","iopub.execute_input":"2024-07-01T13:07:12.919979Z","iopub.status.idle":"2024-07-01T13:07:13.115921Z","shell.execute_reply.started":"2024-07-01T13:07:12.919949Z","shell.execute_reply":"2024-07-01T13:07:13.115240Z"},"trusted":true},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 936x576 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"# save the model\n\nmodel.save_pretrained(\"./output_model\")","metadata":{"execution":{"iopub.status.busy":"2024-07-01T13:07:13.117076Z","iopub.execute_input":"2024-07-01T13:07:13.117305Z","iopub.status.idle":"2024-07-01T13:07:14.289122Z","shell.execute_reply.started":"2024-07-01T13:07:13.117277Z","shell.execute_reply":"2024-07-01T13:07:14.288205Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"markdown","source":"## 5.4. BERT Model's Performance Evaluation","metadata":{}},{"cell_type":"code","source":"# load the model and then evaluate it on holdout set\n\nloaded_model = TFBertForSequenceClassification.from_pretrained(\"./output_model\")\nresult = model.evaluate(holdout_dataset.batch(8))\ndict(zip(model.metrics_names, result))","metadata":{"execution":{"iopub.status.busy":"2024-07-01T13:07:14.290430Z","iopub.execute_input":"2024-07-01T13:07:14.296184Z","iopub.status.idle":"2024-07-01T13:11:25.542707Z","shell.execute_reply.started":"2024-07-01T13:07:14.296129Z","shell.execute_reply":"2024-07-01T13:11:25.541950Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stdout","text":"1250/1250 [==============================] - 249s 200ms/step - loss: 0.6084 - accuracy: 0.7117\n","output_type":"stream"},{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"{'loss': 0.6083831787109375, 'accuracy': 0.7117000222206116}"},"metadata":{}}]},{"cell_type":"markdown","source":"### The model's accuracy 71.17% on our holdout set (other validation set)","metadata":{}},{"cell_type":"code","source":"# predict the sentiment for holdout set\n\ntf_output = loaded_model.predict(holdout_dataset.batch(8))\npred_label = tf.argmax(tf.nn.softmax(tf_output[\"logits\"], axis=1).numpy(), 1).numpy()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T13:11:25.543956Z","iopub.execute_input":"2024-07-01T13:11:25.544643Z","iopub.status.idle":"2024-07-01T13:15:30.898564Z","shell.execute_reply.started":"2024-07-01T13:11:25.544599Z","shell.execute_reply":"2024-07-01T13:15:30.897858Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"# create the confusion matrix of our predictions\n\ncm = tf.math.confusion_matrix(\n    holdout_labels, pred_label, num_classes=2, weights=None, dtype=tf.dtypes.int32,\n    name=None\n).numpy()\n\nprint(\"confusion matrix\\n\",cm)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T13:15:30.899745Z","iopub.execute_input":"2024-07-01T13:15:30.899979Z","iopub.status.idle":"2024-07-01T13:15:30.924705Z","shell.execute_reply.started":"2024-07-01T13:15:30.899950Z","shell.execute_reply":"2024-07-01T13:15:30.923878Z"},"trusted":true},"execution_count":67,"outputs":[{"name":"stdout","text":"confusion matrix\n [[4170 1402]\n [1481 2947]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### The confusion matrix indicates that the model with 20% has reasonably good performance in correctly identifying both negative and positive instances (TN and TP), but it also makes a significant number of errors in both categories (FP and FN).","metadata":{}},{"cell_type":"code","source":"# visualize the confusion matrix\n\ncm_norm = np.around(cm.astype('float') / cm.sum(axis=1)[:, np.newaxis], decimals=2)\n\ncm_df = pd.DataFrame(cm_norm,\n                 index = [0,1], \n                 columns =[0,1])\n\nfigure = plt.figure(figsize=(4, 4))\nsns.heatmap(cm_df, annot=True, cmap=plt.cm.Blues)\nplt.tight_layout()\nplt.ylabel('True label')\nplt.xlabel('Predicted label')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T13:15:30.925767Z","iopub.execute_input":"2024-07-01T13:15:30.925981Z","iopub.status.idle":"2024-07-01T13:15:31.239397Z","shell.execute_reply.started":"2024-07-01T13:15:30.925954Z","shell.execute_reply":"2024-07-01T13:15:31.238652Z"},"trusted":true},"execution_count":68,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 288x288 with 2 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"# Precision, Recall, and F1-Score\n\ntp = cm[0][0]\nfn = cm[0][1]\n\ntn = cm[1][1]\nfp = cm[1][0]\n\nrecall = round(tp / (tp+fn), 2)\nprecision = round(tp / (tp+fp), 2)\nf1score = (2*precision*recall) / (precision + recall)\n\nprint(\"recall score:\", recall)\nprint(\"precision score:\", precision)\nprint(\"F1-Score:\",f1score)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T13:15:31.240734Z","iopub.execute_input":"2024-07-01T13:15:31.240932Z","iopub.status.idle":"2024-07-01T13:15:31.253848Z","shell.execute_reply.started":"2024-07-01T13:15:31.240907Z","shell.execute_reply":"2024-07-01T13:15:31.252983Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"recall score: 0.75\nprecision score: 0.74\nF1-Score: 0.7449664429530201\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### With 20% noise in the labels, an F1-Score of 0.745 indicates that the model maintains a good balance between precision and recall despite the presence of incorrect or noisy labels in the dataset. It shows the model's robustness in correctly identifying positive instances while managing the impact of label noise on its overall performance.","metadata":{}}]}