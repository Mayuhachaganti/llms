{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":2415872,"sourceType":"datasetVersion","datasetId":1461623}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Amazon Reviews Modelling Using BERT with Noisy Labels","metadata":{}},{"cell_type":"markdown","source":"# 1. Install and Import Necessary Libray For NLP and Sentiment Analysis","metadata":{}},{"cell_type":"code","source":"%%capture\n!pip install stopwords\n!pip install flair\n!pip install nltk\n!pip install swifter","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:14:49.488691Z","iopub.execute_input":"2024-07-01T18:14:49.489083Z","iopub.status.idle":"2024-07-01T18:16:06.774422Z","shell.execute_reply.started":"2024-07-01T18:14:49.488985Z","shell.execute_reply":"2024-07-01T18:16:06.773465Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"!pip install --upgrade pyarrow","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:06.776392Z","iopub.execute_input":"2024-07-01T18:16:06.777023Z","iopub.status.idle":"2024-07-01T18:16:16.726908Z","shell.execute_reply.started":"2024-07-01T18:16:06.776991Z","shell.execute_reply":"2024-07-01T18:16:16.726161Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Requirement already satisfied: pyarrow in /opt/conda/lib/python3.7/site-packages (12.0.1)\nRequirement already satisfied: numpy>=1.16.6 in /opt/conda/lib/python3.7/site-packages (from pyarrow) (1.20.3)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nimport random as rn\nimport seaborn as sns\nfrom plotly import graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom collections import Counter\nfrom PIL import Image\n\nfrom imblearn.over_sampling import RandomOverSampler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\npd.options.display.max_rows = None\nseed=40","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:16.728481Z","iopub.execute_input":"2024-07-01T18:16:16.729104Z","iopub.status.idle":"2024-07-01T18:16:21.628408Z","shell.execute_reply.started":"2024-07-01T18:16:16.729061Z","shell.execute_reply":"2024-07-01T18:16:21.627758Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/geopandas/_compat.py:115: UserWarning: The Shapely GEOS version (3.9.1-CAPI-1.14.2) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.\n  shapely_geos_version, geos_capi_version_string\n","output_type":"stream"}]},{"cell_type":"markdown","source":" ","metadata":{}},{"cell_type":"markdown","source":"# 2. Import Amazon Reviews Dataset","metadata":{}},{"cell_type":"markdown","source":"### taking 10% of data to analyze and to be trained.","metadata":{}},{"cell_type":"code","source":"rn.seed(a=40)\nreview = pd.read_csv('../input/amazon-product-reviews/Reviews.csv')\nreview.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:21.629485Z","iopub.execute_input":"2024-07-01T18:16:21.629754Z","iopub.status.idle":"2024-07-01T18:16:28.662137Z","shell.execute_reply.started":"2024-07-01T18:16:21.629725Z","shell.execute_reply":"2024-07-01T18:16:28.661307Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(568454, 10)"},"metadata":{}}]},{"cell_type":"code","source":"review.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:28.664181Z","iopub.execute_input":"2024-07-01T18:16:28.664399Z","iopub.status.idle":"2024-07-01T18:16:28.683408Z","shell.execute_reply.started":"2024-07-01T18:16:28.664373Z","shell.execute_reply":"2024-07-01T18:16:28.682729Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   Id   ProductId          UserId                      ProfileName  \\\n0   1  B001E4KFG0  A3SGXH7AUHU8GW                       delmartian   \n1   2  B00813GRG4  A1D87F6ZCVE5NK                           dll pa   \n2   3  B000LQOCH0   ABXLMWJIXXAIN  Natalia Corres \"Natalia Corres\"   \n3   4  B000UA0QIQ  A395BORC6FGVXV                             Karl   \n4   5  B006K2ZZ7K  A1UQRSCLF8GW1T    Michael D. Bigham \"M. Wassir\"   \n\n   HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n0                     1                       1      5  1303862400   \n1                     0                       0      1  1346976000   \n2                     1                       1      4  1219017600   \n3                     3                       3      2  1307923200   \n4                     0                       0      5  1350777600   \n\n                 Summary                                               Text  \n0  Good Quality Dog Food  I have bought several of the Vitality canned d...  \n1      Not as Advertised  Product arrived labeled as Jumbo Salted Peanut...  \n2  \"Delight\" says it all  This is a confection that has been around a fe...  \n3         Cough Medicine  If you are looking for the secret ingredient i...  \n4            Great taffy  Great taffy at a great price.  There was a wid...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>ProductId</th>\n      <th>UserId</th>\n      <th>ProfileName</th>\n      <th>HelpfulnessNumerator</th>\n      <th>HelpfulnessDenominator</th>\n      <th>Score</th>\n      <th>Time</th>\n      <th>Summary</th>\n      <th>Text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>B001E4KFG0</td>\n      <td>A3SGXH7AUHU8GW</td>\n      <td>delmartian</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>1303862400</td>\n      <td>Good Quality Dog Food</td>\n      <td>I have bought several of the Vitality canned d...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>B00813GRG4</td>\n      <td>A1D87F6ZCVE5NK</td>\n      <td>dll pa</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1346976000</td>\n      <td>Not as Advertised</td>\n      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>B000LQOCH0</td>\n      <td>ABXLMWJIXXAIN</td>\n      <td>Natalia Corres \"Natalia Corres\"</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1219017600</td>\n      <td>\"Delight\" says it all</td>\n      <td>This is a confection that has been around a fe...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>B000UA0QIQ</td>\n      <td>A395BORC6FGVXV</td>\n      <td>Karl</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1307923200</td>\n      <td>Cough Medicine</td>\n      <td>If you are looking for the secret ingredient i...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>B006K2ZZ7K</td>\n      <td>A1UQRSCLF8GW1T</td>\n      <td>Michael D. Bigham \"M. Wassir\"</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>1350777600</td>\n      <td>Great taffy</td>\n      <td>Great taffy at a great price.  There was a wid...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### group the scores into positive and negative sentiment","metadata":{}},{"cell_type":"code","source":"def score_round(x):\n    if x>=3:\n        return 1\n    else: \n        return 0\nreview['review_score']= review.Score.apply(score_round)\nreview = review.rename(columns={'Text':'review_text'})\ndf=review.copy()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:28.684248Z","iopub.execute_input":"2024-07-01T18:16:28.684421Z","iopub.status.idle":"2024-07-01T18:16:29.167305Z","shell.execute_reply.started":"2024-07-01T18:16:28.684400Z","shell.execute_reply":"2024-07-01T18:16:29.166671Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"df['review_score'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:29.168402Z","iopub.execute_input":"2024-07-01T18:16:29.168652Z","iopub.status.idle":"2024-07-01T18:16:29.181333Z","shell.execute_reply.started":"2024-07-01T18:16:29.168623Z","shell.execute_reply":"2024-07-01T18:16:29.180665Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"1    486417\n0     82037\nName: review_score, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"zeroes=df[review['review_score']==0].head(30000)\nones=df[review['review_score']==1].head(20000)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:29.182262Z","iopub.execute_input":"2024-07-01T18:16:29.182464Z","iopub.status.idle":"2024-07-01T18:16:29.278050Z","shell.execute_reply.started":"2024-07-01T18:16:29.182439Z","shell.execute_reply":"2024-07-01T18:16:29.277381Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"d=pd.concat([zeroes,ones])","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:29.279180Z","iopub.execute_input":"2024-07-01T18:16:29.279459Z","iopub.status.idle":"2024-07-01T18:16:29.305142Z","shell.execute_reply.started":"2024-07-01T18:16:29.279423Z","shell.execute_reply":"2024-07-01T18:16:29.304543Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"d.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:29.306076Z","iopub.execute_input":"2024-07-01T18:16:29.306290Z","iopub.status.idle":"2024-07-01T18:16:29.319435Z","shell.execute_reply.started":"2024-07-01T18:16:29.306264Z","shell.execute_reply":"2024-07-01T18:16:29.318756Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"    Id   ProductId          UserId     ProfileName  HelpfulnessNumerator  \\\n1    2  B00813GRG4  A1D87F6ZCVE5NK          dll pa                     0   \n3    4  B000UA0QIQ  A395BORC6FGVXV            Karl                     3   \n12  13  B0009XLVG0   A327PCT23YH90              LT                     1   \n16  17  B001GVISJM  A3KLWF6WQ5BNYO  Erica Neathery                     0   \n26  27  B001GVISJM  A3RXAU2N8KV45G          lady21                     0   \n\n    HelpfulnessDenominator  Score        Time  \\\n1                        0      1  1346976000   \n3                        3      2  1307923200   \n12                       1      1  1339545600   \n16                       0      2  1348099200   \n26                       1      1  1332633600   \n\n                                 Summary  \\\n1                      Not as Advertised   \n3                         Cough Medicine   \n12  My Cats Are Not Fans of the New Food   \n16                            poor taste   \n26                       Nasty No flavor   \n\n                                          review_text  review_score  \n1   Product arrived labeled as Jumbo Salted Peanut...             0  \n3   If you are looking for the secret ingredient i...             0  \n12  My cats have been happily eating Felidae Plati...             0  \n16  I love eating them and they are good for watch...             0  \n26  The candy is just red , No flavor . Just  plan...             0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>ProductId</th>\n      <th>UserId</th>\n      <th>ProfileName</th>\n      <th>HelpfulnessNumerator</th>\n      <th>HelpfulnessDenominator</th>\n      <th>Score</th>\n      <th>Time</th>\n      <th>Summary</th>\n      <th>review_text</th>\n      <th>review_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>B00813GRG4</td>\n      <td>A1D87F6ZCVE5NK</td>\n      <td>dll pa</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1346976000</td>\n      <td>Not as Advertised</td>\n      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>B000UA0QIQ</td>\n      <td>A395BORC6FGVXV</td>\n      <td>Karl</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1307923200</td>\n      <td>Cough Medicine</td>\n      <td>If you are looking for the secret ingredient i...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>13</td>\n      <td>B0009XLVG0</td>\n      <td>A327PCT23YH90</td>\n      <td>LT</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1339545600</td>\n      <td>My Cats Are Not Fans of the New Food</td>\n      <td>My cats have been happily eating Felidae Plati...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>B001GVISJM</td>\n      <td>A3KLWF6WQ5BNYO</td>\n      <td>Erica Neathery</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1348099200</td>\n      <td>poor taste</td>\n      <td>I love eating them and they are good for watch...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>27</td>\n      <td>B001GVISJM</td>\n      <td>A3RXAU2N8KV45G</td>\n      <td>lady21</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1332633600</td>\n      <td>Nasty No flavor</td>\n      <td>The candy is just red , No flavor . Just  plan...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['review_score'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:29.320351Z","iopub.execute_input":"2024-07-01T18:16:29.320542Z","iopub.status.idle":"2024-07-01T18:16:29.334090Z","shell.execute_reply.started":"2024-07-01T18:16:29.320504Z","shell.execute_reply":"2024-07-01T18:16:29.333368Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"1    486417\n0     82037\nName: review_score, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df=d.copy()\ndf=df.sample(frac=1).reset_index(drop=True)\ndf.head()\nimport pandas as pd\nimport numpy as np\nnum_rows_to_shuffle = int(0.3 * len(df))\nnp.random.seed(0)  \nindices_to_shuffle = np.random.choice(df.index[1:], size=num_rows_to_shuffle, replace=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:29.335063Z","iopub.execute_input":"2024-07-01T18:16:29.335266Z","iopub.status.idle":"2024-07-01T18:16:29.386207Z","shell.execute_reply.started":"2024-07-01T18:16:29.335240Z","shell.execute_reply":"2024-07-01T18:16:29.385395Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"len(indices_to_shuffle)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:29.387359Z","iopub.execute_input":"2024-07-01T18:16:29.387652Z","iopub.status.idle":"2024-07-01T18:16:29.393073Z","shell.execute_reply.started":"2024-07-01T18:16:29.387616Z","shell.execute_reply":"2024-07-01T18:16:29.392361Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"15000"},"metadata":{}}]},{"cell_type":"code","source":"d=df.copy()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:29.397391Z","iopub.execute_input":"2024-07-01T18:16:29.397733Z","iopub.status.idle":"2024-07-01T18:16:29.404090Z","shell.execute_reply.started":"2024-07-01T18:16:29.397697Z","shell.execute_reply":"2024-07-01T18:16:29.403394Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"d['review_score'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:29.405039Z","iopub.execute_input":"2024-07-01T18:16:29.405245Z","iopub.status.idle":"2024-07-01T18:16:29.416254Z","shell.execute_reply.started":"2024-07-01T18:16:29.405219Z","shell.execute_reply":"2024-07-01T18:16:29.415568Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"0    30000\n1    20000\nName: review_score, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"for idx in indices_to_shuffle:\n    if df['review_score'].loc[idx]==1:\n        df.at[idx,'review_score']=0\n    elif df['review_score'].loc[idx]==0:\n        df.at[idx,'review_score']=1\n    else:\n        print('no invalid value')","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:29.417274Z","iopub.execute_input":"2024-07-01T18:16:29.417751Z","iopub.status.idle":"2024-07-01T18:16:30.086620Z","shell.execute_reply.started":"2024-07-01T18:16:29.417715Z","shell.execute_reply":"2024-07-01T18:16:30.086002Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"df['review_score'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:30.087574Z","iopub.execute_input":"2024-07-01T18:16:30.087756Z","iopub.status.idle":"2024-07-01T18:16:30.094863Z","shell.execute_reply.started":"2024-07-01T18:16:30.087733Z","shell.execute_reply":"2024-07-01T18:16:30.094071Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"0    27018\n1    22982\nName: review_score, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"review=df.copy()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:30.095939Z","iopub.execute_input":"2024-07-01T18:16:30.096146Z","iopub.status.idle":"2024-07-01T18:16:30.130550Z","shell.execute_reply.started":"2024-07-01T18:16:30.096122Z","shell.execute_reply":"2024-07-01T18:16:30.129947Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"# review.review_score.replace(\"positive\" , 1 , inplace = True)\n# review.review_score.replace(\"negative\" , 0 , inplace = True)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:30.131462Z","iopub.execute_input":"2024-07-01T18:16:30.131764Z","iopub.status.idle":"2024-07-01T18:16:30.135073Z","shell.execute_reply.started":"2024-07-01T18:16:30.131736Z","shell.execute_reply":"2024-07-01T18:16:30.134264Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":"### making sure that the text review data type is string","metadata":{}},{"cell_type":"code","source":"review.review_text = review.review_text.astype('str')\nreview.Summary = review.Summary.astype('str')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:30.136051Z","iopub.execute_input":"2024-07-01T18:16:30.136290Z","iopub.status.idle":"2024-07-01T18:16:30.157887Z","shell.execute_reply.started":"2024-07-01T18:16:30.136264Z","shell.execute_reply":"2024-07-01T18:16:30.157322Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"# 3. Analysis and Visualization","metadata":{}},{"cell_type":"code","source":"temp = review.groupby('review_score').count()['review_text'].reset_index().sort_values(by='review_text',ascending=False)\ntemp.style.background_gradient(cmap='Purples')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:30.159157Z","iopub.execute_input":"2024-07-01T18:16:30.159352Z","iopub.status.idle":"2024-07-01T18:16:30.269851Z","shell.execute_reply.started":"2024-07-01T18:16:30.159327Z","shell.execute_reply":"2024-07-01T18:16:30.269162Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7a0ec63a8890>","text/html":"<style type=\"text/css\">\n#T_91828_row0_col0, #T_91828_row1_col1 {\n  background-color: #fcfbfd;\n  color: #000000;\n}\n#T_91828_row0_col1, #T_91828_row1_col0 {\n  background-color: #3f007d;\n  color: #f1f1f1;\n}\n</style>\n<table id=\"T_91828_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >review_score</th>\n      <th class=\"col_heading level0 col1\" >review_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_91828_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_91828_row0_col0\" class=\"data row0 col0\" >0</td>\n      <td id=\"T_91828_row0_col1\" class=\"data row0 col1\" >27018</td>\n    </tr>\n    <tr>\n      <th id=\"T_91828_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_91828_row1_col0\" class=\"data row1 col0\" >1</td>\n      <td id=\"T_91828_row1_col1\" class=\"data row1 col1\" >22982</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}]},{"cell_type":"code","source":"sns.set_theme(style='whitegrid')\nsns.set(rc = {'figure.figsize':(13,8)})\nsns.set_palette(\"pastel\")\nsns.countplot(x='review_score',data=review)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:30.270919Z","iopub.execute_input":"2024-07-01T18:16:30.271797Z","iopub.status.idle":"2024-07-01T18:16:30.520823Z","shell.execute_reply.started":"2024-07-01T18:16:30.271764Z","shell.execute_reply":"2024-07-01T18:16:30.520141Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='review_score', ylabel='count'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 936x576 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"positive = review[review['review_score']==1]\nnegative = review[review['review_score']==0]","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:30.529227Z","iopub.execute_input":"2024-07-01T18:16:30.529408Z","iopub.status.idle":"2024-07-01T18:16:30.548172Z","shell.execute_reply.started":"2024-07-01T18:16:30.529385Z","shell.execute_reply":"2024-07-01T18:16:30.547655Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":"# 4. Data Cleaning For Sentiment Processing","metadata":{}},{"cell_type":"code","source":"from nltk.corpus import stopwords\nfrom nltk import WordNetLemmatizer\nnltk.download('stopwords')\nfrom nltk.stem import PorterStemmer","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:30.758849Z","iopub.execute_input":"2024-07-01T18:16:30.759056Z","iopub.status.idle":"2024-07-01T18:16:31.114204Z","shell.execute_reply.started":"2024-07-01T18:16:30.759031Z","shell.execute_reply":"2024-07-01T18:16:31.113453Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Unzipping corpora/stopwords.zip.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Null values Cleaning","metadata":{}},{"cell_type":"code","source":"review.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.115336Z","iopub.execute_input":"2024-07-01T18:16:31.115694Z","iopub.status.idle":"2024-07-01T18:16:31.158914Z","shell.execute_reply.started":"2024-07-01T18:16:31.115656Z","shell.execute_reply":"2024-07-01T18:16:31.158091Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"Id                        0\nProductId                 0\nUserId                    0\nProfileName               2\nHelpfulnessNumerator      0\nHelpfulnessDenominator    0\nScore                     0\nTime                      0\nSummary                   0\nreview_text               0\nreview_score              0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"### Duplicate Values Removing","metadata":{}},{"cell_type":"code","source":"review = review.drop_duplicates(keep='first')","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.160071Z","iopub.execute_input":"2024-07-01T18:16:31.160550Z","iopub.status.idle":"2024-07-01T18:16:31.296366Z","shell.execute_reply.started":"2024-07-01T18:16:31.160490Z","shell.execute_reply":"2024-07-01T18:16:31.295764Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"review.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.297456Z","iopub.execute_input":"2024-07-01T18:16:31.297749Z","iopub.status.idle":"2024-07-01T18:16:31.302966Z","shell.execute_reply.started":"2024-07-01T18:16:31.297712Z","shell.execute_reply":"2024-07-01T18:16:31.302243Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"(50000, 11)"},"metadata":{}}]},{"cell_type":"code","source":"def clean(raw):\n    \"\"\" Remove hyperlinks and markup \"\"\"\n    result = re.sub(\"<[a][^>]*>(.+?)</[a]>\", 'Link.', raw)\n    result = re.sub('&gt;', \"\", result)\n    result = re.sub('&#x27;', \"'\", result)\n    result = re.sub('&quot;', '\"', result)\n    result = re.sub('&#x2F;', ' ', result)\n    result = re.sub('<p>', ' ', result)\n    result = re.sub('</i>', '', result)\n    result = re.sub('&#62;', '', result)\n    result = re.sub('<i>', ' ', result)\n    result = re.sub(\"\\n\", '', result)\n    return result","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.304105Z","iopub.execute_input":"2024-07-01T18:16:31.304608Z","iopub.status.idle":"2024-07-01T18:16:31.312741Z","shell.execute_reply.started":"2024-07-01T18:16:31.304570Z","shell.execute_reply":"2024-07-01T18:16:31.312045Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"def remove_num(texts):\n   output = re.sub(r'\\d+', '', texts)\n   return output","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.313711Z","iopub.execute_input":"2024-07-01T18:16:31.313953Z","iopub.status.idle":"2024-07-01T18:16:31.324217Z","shell.execute_reply.started":"2024-07-01T18:16:31.313928Z","shell.execute_reply":"2024-07-01T18:16:31.323543Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"def deEmojify(x):\n    regrex_pattern = re.compile(pattern = \"[\"\n        u\"\\U0001F600-\\U0001F64F\"  # emoticons\n        u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n        u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n        u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           \"]+\", flags = re.UNICODE)\n    return regrex_pattern.sub(r'', x)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.325183Z","iopub.execute_input":"2024-07-01T18:16:31.325390Z","iopub.status.idle":"2024-07-01T18:16:31.333750Z","shell.execute_reply.started":"2024-07-01T18:16:31.325365Z","shell.execute_reply":"2024-07-01T18:16:31.333107Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"def unify_whitespaces(x):\n    cleaned_string = re.sub(' +', ' ', x)\n    return cleaned_string ","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.339396Z","iopub.execute_input":"2024-07-01T18:16:31.339626Z","iopub.status.idle":"2024-07-01T18:16:31.343408Z","shell.execute_reply.started":"2024-07-01T18:16:31.339599Z","shell.execute_reply":"2024-07-01T18:16:31.342707Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"def remove_symbols(x):\n    cleaned_string = re.sub(r\"[^a-zA-Z0-9?!.,]+\", ' ', x)\n    return cleaned_string","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.344308Z","iopub.execute_input":"2024-07-01T18:16:31.344507Z","iopub.status.idle":"2024-07-01T18:16:31.353504Z","shell.execute_reply.started":"2024-07-01T18:16:31.344482Z","shell.execute_reply":"2024-07-01T18:16:31.352820Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"def remove_punctuation(text):\n    final = \"\".join(u for u in text if u not in (\"?\", \".\", \";\", \":\",  \"!\",'\"',','))\n    return final","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.354481Z","iopub.execute_input":"2024-07-01T18:16:31.354762Z","iopub.status.idle":"2024-07-01T18:16:31.362899Z","shell.execute_reply.started":"2024-07-01T18:16:31.354725Z","shell.execute_reply":"2024-07-01T18:16:31.362177Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"stop=set(stopwords.words(\"english\"))\nstemmer=PorterStemmer()\nlemma=WordNetLemmatizer()\n\ndef remove_stopword(text):\n   text=[word.lower() for word in text.split() if word.lower() not in stop]\n   return \" \".join(text)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.364050Z","iopub.execute_input":"2024-07-01T18:16:31.364514Z","iopub.status.idle":"2024-07-01T18:16:31.374759Z","shell.execute_reply.started":"2024-07-01T18:16:31.364476Z","shell.execute_reply":"2024-07-01T18:16:31.374072Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"from nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer\ndef Stemming(text):\n   stem=[]\n   stopword = stopwords.words('english')\n   snowball_stemmer = SnowballStemmer('english')\n   word_tokens = nltk.word_tokenize(text)\n   stemmed_word = [snowball_stemmer.stem(word) for word in word_tokens]\n   stem=' '.join(stemmed_word)\n   return stem","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.375697Z","iopub.execute_input":"2024-07-01T18:16:31.375911Z","iopub.status.idle":"2024-07-01T18:16:31.382694Z","shell.execute_reply.started":"2024-07-01T18:16:31.375877Z","shell.execute_reply":"2024-07-01T18:16:31.382068Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"def cleaning(df,review):\n    df[review] = df[review].apply(clean)\n    df[review] = df[review].apply(deEmojify)\n    df[review] = df[review].str.lower()\n    df[review] = df[review].apply(remove_num)\n    df[review] = df[review].apply(remove_symbols)\n    df[review] = df[review].apply(remove_punctuation)\n    df[review] = df[review].apply(remove_stopword)\n    df[review] = df[review].apply(unify_whitespaces)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.383552Z","iopub.execute_input":"2024-07-01T18:16:31.383754Z","iopub.status.idle":"2024-07-01T18:16:31.392787Z","shell.execute_reply.started":"2024-07-01T18:16:31.383730Z","shell.execute_reply":"2024-07-01T18:16:31.392181Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"cleaning(review,'review_text')","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:31.393694Z","iopub.execute_input":"2024-07-01T18:16:31.393869Z","iopub.status.idle":"2024-07-01T18:16:44.874199Z","shell.execute_reply.started":"2024-07-01T18:16:31.393846Z","shell.execute_reply":"2024-07-01T18:16:44.873361Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"review.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:44.875302Z","iopub.execute_input":"2024-07-01T18:16:44.875551Z","iopub.status.idle":"2024-07-01T18:16:44.916384Z","shell.execute_reply.started":"2024-07-01T18:16:44.875506Z","shell.execute_reply":"2024-07-01T18:16:44.915575Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"Id                        0\nProductId                 0\nUserId                    0\nProfileName               2\nHelpfulnessNumerator      0\nHelpfulnessDenominator    0\nScore                     0\nTime                      0\nSummary                   0\nreview_text               0\nreview_score              0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"review[['review_text']].head(20)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:44.917407Z","iopub.execute_input":"2024-07-01T18:16:44.917630Z","iopub.status.idle":"2024-07-01T18:16:44.929610Z","shell.execute_reply.started":"2024-07-01T18:16:44.917603Z","shell.execute_reply":"2024-07-01T18:16:44.928937Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"                                          review_text\n0   vanilla ok however lip bottle rounded vanilla ...\n1   pretty disappointed incredibly dry point almos...\n2   eat like like something substance eat know eat...\n3   excited find affordable bulk organic flours pa...\n4   item great price tastes great thing could make...\n5   buying dogswell chew treats dog several years ...\n6   bought local supermarket enjoyed although salt...\n7   drinking loose leaf tea worst stuff tried yet ...\n8   really nice flavor carbonated absolutely nothi...\n9   tossed trying texture taste far expectations s...\n10  purchased week chianti wine kit vino italiano ...\n11  three dogs get greenie every day amazed see tr...\n12  first tried powdered green teas stash last sum...\n13  jamaica wife drank blue mountain coffer every ...\n14  family loves granola whether sprinkling yogurt...\n15  seeds really good new flavor big time miss tas...\n16  ugh stuff may good appealing mixed oatmeal fin...\n17  buy toy unless dog genius two smart dogs toy i...\n18  buy time taste great tried another organic bra...\n19  recently put gluten nightshade free diet spent...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>review_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>vanilla ok however lip bottle rounded vanilla ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>pretty disappointed incredibly dry point almos...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>eat like like something substance eat know eat...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>excited find affordable bulk organic flours pa...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>item great price tastes great thing could make...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>buying dogswell chew treats dog several years ...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>bought local supermarket enjoyed although salt...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>drinking loose leaf tea worst stuff tried yet ...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>really nice flavor carbonated absolutely nothi...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>tossed trying texture taste far expectations s...</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>purchased week chianti wine kit vino italiano ...</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>three dogs get greenie every day amazed see tr...</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>first tried powdered green teas stash last sum...</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>jamaica wife drank blue mountain coffer every ...</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>family loves granola whether sprinkling yogurt...</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>seeds really good new flavor big time miss tas...</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>ugh stuff may good appealing mixed oatmeal fin...</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>buy toy unless dog genius two smart dogs toy i...</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>buy time taste great tried another organic bra...</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>recently put gluten nightshade free diet spent...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"review_vis2 = review.copy()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:44.930672Z","iopub.execute_input":"2024-07-01T18:16:44.930930Z","iopub.status.idle":"2024-07-01T18:16:44.942836Z","shell.execute_reply.started":"2024-07-01T18:16:44.930895Z","shell.execute_reply":"2024-07-01T18:16:44.942177Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"review_vis2['temp_list'] = review_vis2['review_text'].apply(lambda x:str(x).split())\ntop = Counter([item for sublist in review_vis2['temp_list'] for item in sublist])\ntemp = pd.DataFrame(top.most_common(20))\ntemp.columns = ['Common_words','count']\ntemp.style.background_gradient(cmap='Blues')","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:44.943806Z","iopub.execute_input":"2024-07-01T18:16:44.944046Z","iopub.status.idle":"2024-07-01T18:16:45.625026Z","shell.execute_reply.started":"2024-07-01T18:16:44.944019Z","shell.execute_reply":"2024-07-01T18:16:45.624316Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7a0ea9b63490>","text/html":"<style type=\"text/css\">\n#T_a1f25_row0_col1 {\n  background-color: #08306b;\n  color: #f1f1f1;\n}\n#T_a1f25_row1_col1 {\n  background-color: #aed1e7;\n  color: #000000;\n}\n#T_a1f25_row2_col1 {\n  background-color: #d4e4f4;\n  color: #000000;\n}\n#T_a1f25_row3_col1 {\n  background-color: #d6e6f4;\n  color: #000000;\n}\n#T_a1f25_row4_col1 {\n  background-color: #d7e6f5;\n  color: #000000;\n}\n#T_a1f25_row5_col1 {\n  background-color: #d8e7f5;\n  color: #000000;\n}\n#T_a1f25_row6_col1 {\n  background-color: #dbe9f6;\n  color: #000000;\n}\n#T_a1f25_row7_col1 {\n  background-color: #dfebf7;\n  color: #000000;\n}\n#T_a1f25_row8_col1 {\n  background-color: #e5eff9;\n  color: #000000;\n}\n#T_a1f25_row9_col1 {\n  background-color: #e7f0fa;\n  color: #000000;\n}\n#T_a1f25_row10_col1 {\n  background-color: #eff6fc;\n  color: #000000;\n}\n#T_a1f25_row11_col1 {\n  background-color: #f0f6fd;\n  color: #000000;\n}\n#T_a1f25_row12_col1 {\n  background-color: #f1f7fd;\n  color: #000000;\n}\n#T_a1f25_row13_col1 {\n  background-color: #f3f8fe;\n  color: #000000;\n}\n#T_a1f25_row14_col1, #T_a1f25_row15_col1 {\n  background-color: #f5f9fe;\n  color: #000000;\n}\n#T_a1f25_row16_col1, #T_a1f25_row17_col1 {\n  background-color: #f6faff;\n  color: #000000;\n}\n#T_a1f25_row18_col1, #T_a1f25_row19_col1 {\n  background-color: #f7fbff;\n  color: #000000;\n}\n</style>\n<table id=\"T_a1f25_\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th class=\"col_heading level0 col0\" >Common_words</th>\n      <th class=\"col_heading level0 col1\" >count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_a1f25_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_a1f25_row0_col0\" class=\"data row0 col0\" >br</td>\n      <td id=\"T_a1f25_row0_col1\" class=\"data row0 col1\" >61752</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_a1f25_row1_col0\" class=\"data row1 col0\" >like</td>\n      <td id=\"T_a1f25_row1_col1\" class=\"data row1 col1\" >25282</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_a1f25_row2_col0\" class=\"data row2 col0\" >taste</td>\n      <td id=\"T_a1f25_row2_col1\" class=\"data row2 col1\" >17426</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_a1f25_row3_col0\" class=\"data row3 col0\" >product</td>\n      <td id=\"T_a1f25_row3_col1\" class=\"data row3 col1\" >16776</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_a1f25_row4_col0\" class=\"data row4 col0\" >one</td>\n      <td id=\"T_a1f25_row4_col1\" class=\"data row4 col1\" >16409</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n      <td id=\"T_a1f25_row5_col0\" class=\"data row5 col0\" >coffee</td>\n      <td id=\"T_a1f25_row5_col1\" class=\"data row5 col1\" >16282</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n      <td id=\"T_a1f25_row6_col0\" class=\"data row6 col0\" >good</td>\n      <td id=\"T_a1f25_row6_col1\" class=\"data row6 col1\" >15444</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n      <td id=\"T_a1f25_row7_col0\" class=\"data row7 col0\" >would</td>\n      <td id=\"T_a1f25_row7_col1\" class=\"data row7 col1\" >14303</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n      <td id=\"T_a1f25_row8_col0\" class=\"data row8 col0\" >food</td>\n      <td id=\"T_a1f25_row8_col1\" class=\"data row8 col1\" >12691</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n      <td id=\"T_a1f25_row9_col0\" class=\"data row9 col0\" >flavor</td>\n      <td id=\"T_a1f25_row9_col1\" class=\"data row9 col1\" >12359</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n      <td id=\"T_a1f25_row10_col0\" class=\"data row10 col0\" >tea</td>\n      <td id=\"T_a1f25_row10_col1\" class=\"data row10 col1\" >9850</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n      <td id=\"T_a1f25_row11_col0\" class=\"data row11 col0\" >get</td>\n      <td id=\"T_a1f25_row11_col1\" class=\"data row11 col1\" >9821</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n      <td id=\"T_a1f25_row12_col0\" class=\"data row12 col0\" >great</td>\n      <td id=\"T_a1f25_row12_col1\" class=\"data row12 col1\" >9613</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n      <td id=\"T_a1f25_row13_col0\" class=\"data row13 col0\" >really</td>\n      <td id=\"T_a1f25_row13_col1\" class=\"data row13 col1\" >8985</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n      <td id=\"T_a1f25_row14_col0\" class=\"data row14 col0\" >much</td>\n      <td id=\"T_a1f25_row14_col1\" class=\"data row14 col1\" >8549</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n      <td id=\"T_a1f25_row15_col0\" class=\"data row15 col0\" >even</td>\n      <td id=\"T_a1f25_row15_col1\" class=\"data row15 col1\" >8418</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n      <td id=\"T_a1f25_row16_col0\" class=\"data row16 col0\" >buy</td>\n      <td id=\"T_a1f25_row16_col1\" class=\"data row16 col1\" >8099</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n      <td id=\"T_a1f25_row17_col0\" class=\"data row17 col0\" >love</td>\n      <td id=\"T_a1f25_row17_col1\" class=\"data row17 col1\" >7968</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n      <td id=\"T_a1f25_row18_col0\" class=\"data row18 col0\" >dog</td>\n      <td id=\"T_a1f25_row18_col1\" class=\"data row18 col1\" >7779</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1f25_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n      <td id=\"T_a1f25_row19_col0\" class=\"data row19 col0\" >amazon</td>\n      <td id=\"T_a1f25_row19_col1\" class=\"data row19 col1\" >7726</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}]},{"cell_type":"code","source":"sns.set_theme(style=\"whitegrid\")\nsns.barplot(x=\"count\", y=\"Common_words\", data=temp)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:45.626369Z","iopub.execute_input":"2024-07-01T18:16:45.626602Z","iopub.status.idle":"2024-07-01T18:16:46.058869Z","shell.execute_reply.started":"2024-07-01T18:16:45.626572Z","shell.execute_reply":"2024-07-01T18:16:46.057991Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:xlabel='count', ylabel='Common_words'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 936x576 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":" ","metadata":{}},{"cell_type":"markdown","source":"# 5. BERT Tokenizing and Modelling","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tokenizers import BertWordPieceTokenizer\n\nimport transformers\nfrom transformers import BertTokenizer, TFBertForSequenceClassification\nfrom transformers import InputExample, InputFeatures\n\nimport logging\ntransformers.logging.set_verbosity_error()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:46.060020Z","iopub.execute_input":"2024-07-01T18:16:46.060286Z","iopub.status.idle":"2024-07-01T18:16:53.935474Z","shell.execute_reply.started":"2024-07-01T18:16:46.060251Z","shell.execute_reply":"2024-07-01T18:16:53.934848Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"reviews = review[\"review_text\"].values.tolist()\nlabels = review[\"review_score\"].tolist()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:53.936619Z","iopub.execute_input":"2024-07-01T18:16:53.936844Z","iopub.status.idle":"2024-07-01T18:16:53.943884Z","shell.execute_reply.started":"2024-07-01T18:16:53.936817Z","shell.execute_reply":"2024-07-01T18:16:53.943174Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"# split the dataset into train, validation and holdout sets (60-20-20)\ntraining_sentences, test_sentences, training_labels, test_labels = train_test_split(reviews, labels, test_size=.4)\n\nvalidation_sentences, holdout_sentences, validation_labels, holdout_labels = train_test_split(test_sentences, test_labels, test_size=.5)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:53.944891Z","iopub.execute_input":"2024-07-01T18:16:53.945098Z","iopub.status.idle":"2024-07-01T18:16:53.998242Z","shell.execute_reply.started":"2024-07-01T18:16:53.945072Z","shell.execute_reply":"2024-07-01T18:16:53.997565Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"tokenizer = BertTokenizer.from_pretrained('bert-base-cased')","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:53.999299Z","iopub.execute_input":"2024-07-01T18:16:53.999666Z","iopub.status.idle":"2024-07-01T18:16:57.395408Z","shell.execute_reply.started":"2024-07-01T18:16:53.999629Z","shell.execute_reply":"2024-07-01T18:16:57.394699Z"},"trusted":true},"execution_count":56,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading vocab.txt:   0%|          | 0.00/213k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"af7fc1ae0fe548f8a8770e6f35b10d43"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading tokenizer_config.json:   0%|          | 0.00/49.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d938abf58a354a6bab5f5566035dc15c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"af414fa4f4854e6fb3a0d4bd76e05eba"}},"metadata":{}}]},{"cell_type":"code","source":"# Example of the tokenizer output\ntokenizer([training_sentences[0]], truncation=True,\n                            padding=True, max_length=512)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:57.396508Z","iopub.execute_input":"2024-07-01T18:16:57.396768Z","iopub.status.idle":"2024-07-01T18:16:57.407264Z","shell.execute_reply.started":"2024-07-01T18:16:57.396739Z","shell.execute_reply":"2024-07-01T18:16:57.406427Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"{'input_ids': [[101, 3317, 1250, 1686, 1207, 1137, 21649, 1116, 3310, 3317, 7676, 4138, 24266, 1193, 1566, 14741, 1378, 2771, 14067, 1250, 10469, 1250, 3554, 10564, 11130, 192, 170, 1665, 2633, 3857, 5606, 6161, 24266, 1193, 3052, 3828, 9304, 9304, 1341, 3672, 3317, 1250, 9304, 1606, 2771, 14067, 8295, 5569, 16355, 3317, 2871, 2231, 9958, 9304, 3940, 4554, 1186, 2566, 1236, 1277, 6656, 3317, 1404, 6290, 1189, 8984, 1404, 5369, 1277, 2308, 11902, 2556, 1158, 6656, 9304, 9304, 1612, 2480, 1363, 3317, 2053, 1567, 4176, 189, 3464, 1582, 22318, 3926, 1299, 1958, 1329, 2379, 3317, 1270, 22108, 13282, 1612, 5663, 12330, 1474, 6929, 1587, 1176, 1321, 1974, 14659, 6656, 17791, 3952, 1404, 192, 17907, 102]], 'token_type_ids': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'attention_mask': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}"},"metadata":{}}]},{"cell_type":"code","source":"# tokenize training, validation and hold-out Texts\n\ntrain_encodings = tokenizer(training_sentences,\n                            truncation=True,\n                            padding=True)\n\nvalidation_encodings = tokenizer(validation_sentences,\n                            truncation=True,\n                            padding=True)\n\nholdout_encodings = tokenizer(holdout_sentences,\n                            truncation=True,\n                            padding=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:16:57.408390Z","iopub.execute_input":"2024-07-01T18:16:57.408761Z","iopub.status.idle":"2024-07-01T18:18:21.931823Z","shell.execute_reply.started":"2024-07-01T18:16:57.408722Z","shell.execute_reply":"2024-07-01T18:18:21.931086Z"},"trusted":true},"execution_count":58,"outputs":[]},{"cell_type":"code","source":"# convert the input encodings and labels into a TensorFlow Dataset object\n\ntrain_dataset = tf.data.Dataset.from_tensor_slices((\n                            dict(train_encodings),\n                            training_labels\n                            ));\n\nvalidation_dataset = tf.data.Dataset.from_tensor_slices((\n                            dict(validation_encodings),\n                            validation_labels\n                            ));\n\nholdout_dataset = tf.data.Dataset.from_tensor_slices((\n                            dict(holdout_encodings),\n                            holdout_labels\n                            ));","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:18:21.932988Z","iopub.execute_input":"2024-07-01T18:18:21.933260Z","iopub.status.idle":"2024-07-01T18:23:04.568037Z","shell.execute_reply.started":"2024-07-01T18:18:21.933223Z","shell.execute_reply":"2024-07-01T18:23:04.567296Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"# initialize our pre-trained BERT model\n\nmodel = TFBertForSequenceClassification.from_pretrained('bert-base-cased',num_labels=2)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:23:04.569102Z","iopub.execute_input":"2024-07-01T18:23:04.569330Z","iopub.status.idle":"2024-07-01T18:23:10.911578Z","shell.execute_reply.started":"2024-07-01T18:23:04.569301Z","shell.execute_reply":"2024-07-01T18:23:10.910594Z"},"trusted":true},"execution_count":60,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading tf_model.h5:   0%|          | 0.00/527M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"09e1fec3eefd4f828511ce61817baa50"}},"metadata":{}}]},{"cell_type":"code","source":"optimizer = tf.keras.optimizers.Adam(learning_rate=2e-5, epsilon=1e-08)\nmodel.compile(optimizer=optimizer, loss=model.compute_loss, metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:23:10.912901Z","iopub.execute_input":"2024-07-01T18:23:10.913171Z","iopub.status.idle":"2024-07-01T18:23:10.929606Z","shell.execute_reply.started":"2024-07-01T18:23:10.913135Z","shell.execute_reply":"2024-07-01T18:23:10.928960Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"# train and fine tune our pre-trained BERT model\n\nhistory = model.fit(train_dataset.shuffle(100).batch(8),\n          epochs=3,\n          batch_size=8,\n          validation_data=validation_dataset.shuffle(100).batch(8), verbose=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T18:23:10.930511Z","iopub.execute_input":"2024-07-01T18:23:10.930740Z","iopub.status.idle":"2024-07-01T20:22:15.616113Z","shell.execute_reply.started":"2024-07-01T18:23:10.930710Z","shell.execute_reply":"2024-07-01T20:22:15.615257Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"Epoch 1/3\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/tensorflow/python/autograph/impl/api.py:376: FutureWarning: The old compute_loss method is deprecated as it conflicts with the Keras compute_loss method added in TF 2.8. If you want the original HF compute_loss, please call hf_compute_loss() instead. From TF versions >= 2.8, or Transformers versions >= 5, calling compute_loss() will get the Keras method instead.\n  return py_builtins.overload_of(f)(*args)\n","output_type":"stream"},{"name":"stdout","text":"3750/3750 [==============================] - 2397s 634ms/step - loss: 0.6711 - accuracy: 0.5998 - val_loss: 0.6557 - val_accuracy: 0.6227\nEpoch 2/3\n3750/3750 [==============================] - 2374s 633ms/step - loss: 0.6395 - accuracy: 0.6547 - val_loss: 0.6599 - val_accuracy: 0.6239\nEpoch 3/3\n3750/3750 [==============================] - 2373s 633ms/step - loss: 0.5888 - accuracy: 0.7119 - val_loss: 0.6734 - val_accuracy: 0.6247\n","output_type":"stream"}]},{"cell_type":"code","source":"from matplotlib.ticker import MaxNLocator\n\n# plot train and validation accuracy\n\nax = plt.figure().gca()\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nax.xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:22:15.617475Z","iopub.execute_input":"2024-07-01T20:22:15.618188Z","iopub.status.idle":"2024-07-01T20:22:15.877230Z","shell.execute_reply.started":"2024-07-01T20:22:15.618144Z","shell.execute_reply":"2024-07-01T20:22:15.876505Z"},"trusted":true},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 936x576 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"# We save the model\n\nmodel.save_pretrained(\"./output_model\")","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:22:15.878431Z","iopub.execute_input":"2024-07-01T20:22:15.878972Z","iopub.status.idle":"2024-07-01T20:22:17.022014Z","shell.execute_reply.started":"2024-07-01T20:22:15.878931Z","shell.execute_reply":"2024-07-01T20:22:17.021373Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"markdown","source":"## 5.4. BERT Model's Performance Evaluation","metadata":{}},{"cell_type":"code","source":"# We load the model and then evaluate it on holdout set\n\nloaded_model = TFBertForSequenceClassification.from_pretrained(\"./output_model\")\nresult = model.evaluate(holdout_dataset.batch(8))\ndict(zip(model.metrics_names, result))","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:22:17.023054Z","iopub.execute_input":"2024-07-01T20:22:17.023248Z","iopub.status.idle":"2024-07-01T20:26:24.894126Z","shell.execute_reply.started":"2024-07-01T20:22:17.023223Z","shell.execute_reply":"2024-07-01T20:26:24.893288Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stdout","text":"1250/1250 [==============================] - 247s 198ms/step - loss: 0.6662 - accuracy: 0.6310\n","output_type":"stream"},{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"{'loss': 0.6661994457244873, 'accuracy': 0.6309999823570251}"},"metadata":{}}]},{"cell_type":"markdown","source":"### The model's accuracy is 63.09% on our holdout set (other validation set)","metadata":{}},{"cell_type":"code","source":"# predict the sentiment for holdout set\n\ntf_output = loaded_model.predict(holdout_dataset.batch(8))\npred_label = tf.argmax(tf.nn.softmax(tf_output[\"logits\"], axis=1).numpy(), 1).numpy()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:26:24.895140Z","iopub.execute_input":"2024-07-01T20:26:24.895332Z","iopub.status.idle":"2024-07-01T20:30:29.754936Z","shell.execute_reply.started":"2024-07-01T20:26:24.895308Z","shell.execute_reply":"2024-07-01T20:30:29.754170Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"# create the confusion matrix of our predictions\n\ncm = tf.math.confusion_matrix(\n    holdout_labels, pred_label, num_classes=2, weights=None, dtype=tf.dtypes.int32,\n    name=None\n).numpy()\n\nprint(\"confusion matrix\\n\",cm)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:30:29.756045Z","iopub.execute_input":"2024-07-01T20:30:29.756271Z","iopub.status.idle":"2024-07-01T20:30:29.779848Z","shell.execute_reply.started":"2024-07-01T20:30:29.756243Z","shell.execute_reply":"2024-07-01T20:30:29.779131Z"},"trusted":true},"execution_count":67,"outputs":[{"name":"stdout","text":"confusion matrix\n [[3877 1597]\n [2093 2433]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Despite the 30% noise in the labels, the model still manages to correctly identify a significant number of negatives (TN) and positives (TP). However, it also makes a considerable number of errors, classifying negatives as positives (FP) and positives as negatives (FN).","metadata":{}},{"cell_type":"code","source":"# We can visualize the confusion matrix\n\ncm_norm = np.around(cm.astype('float') / cm.sum(axis=1)[:, np.newaxis], decimals=2)\n\ncm_df = pd.DataFrame(cm_norm,\n                 index = [0,1], \n                 columns =[0,1])\n\nfigure = plt.figure(figsize=(4, 4))\nsns.heatmap(cm_df, annot=True, cmap=plt.cm.Blues)\nplt.tight_layout()\nplt.ylabel('True label')\nplt.xlabel('Predicted label')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:30:29.780781Z","iopub.execute_input":"2024-07-01T20:30:29.780962Z","iopub.status.idle":"2024-07-01T20:30:29.988013Z","shell.execute_reply.started":"2024-07-01T20:30:29.780939Z","shell.execute_reply":"2024-07-01T20:30:29.987203Z"},"trusted":true},"execution_count":68,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 288x288 with 2 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"# Precision, Recall, and F1-Score\n\ntp = cm[0][0]\nfn = cm[0][1]\n\ntn = cm[1][1]\nfp = cm[1][0]\n\nrecall = round(tp / (tp+fn), 2)\nprecision = round(tp / (tp+fp), 2)\nf1score = (2*precision*recall) / (precision + recall)\n\nprint(\"recall score:\", recall)\nprint(\"precision score:\", precision)\nprint(\"F1-Score:\",f1score)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:30:29.989225Z","iopub.execute_input":"2024-07-01T20:30:29.989572Z","iopub.status.idle":"2024-07-01T20:30:30.002975Z","shell.execute_reply.started":"2024-07-01T20:30:29.989518Z","shell.execute_reply":"2024-07-01T20:30:30.001894Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"recall score: 0.71\nprecision score: 0.65\nF1-Score: 0.6786764705882353\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### With an F1-Score of 0.6787 and considering 30% label noise, it indicates that the model achieves moderate performance in balancing precision and recall. Despite the higher label noise, the F1-Score shows the model's ability to effectively identify positives while managing some level of incorrect predictions (false positives and false negatives).","metadata":{}}]}